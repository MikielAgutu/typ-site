{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Typ is a simple typesetting application. Turn plain Markdown into a formatted PDF, ready for print. Focus on content, not formatting. Features Write content in Markdown Syntax highlighting Command line interface Configure page dimensions, fonts, formatting, and so on Produce PDFs usable by print on demand services Cross platform (Soon...) Get started New to Typ? See Getting Started . Download and install See the Installation page. Comments? Questions? Typ is still in an early stage of development. For the latest news, follow Typ on Twitter @typ_set . You can view the entire source code for this site on it's GitHub page . If you have a bug report, feature request, or question, feel free to open a GitHub issue. Pull Requests are also welcome if you'd like to contribute your own changes.","title":"Home"},{"location":"#features","text":"Write content in Markdown Syntax highlighting Command line interface Configure page dimensions, fonts, formatting, and so on Produce PDFs usable by print on demand services Cross platform (Soon...)","title":"Features"},{"location":"#get-started","text":"New to Typ? See Getting Started .","title":"Get started"},{"location":"#download-and-install","text":"See the Installation page.","title":"Download and install"},{"location":"#comments-questions","text":"Typ is still in an early stage of development. For the latest news, follow Typ on Twitter @typ_set . You can view the entire source code for this site on it's GitHub page . If you have a bug report, feature request, or question, feel free to open a GitHub issue. Pull Requests are also welcome if you'd like to contribute your own changes.","title":"Comments? Questions?"},{"location":"about/","text":"About Typ is a simple typesetting application. Turn plain Markdown into a formatted PDF ready for print. Focus on content, not formatting.","title":"About"},{"location":"about/#about","text":"Typ is a simple typesetting application. Turn plain Markdown into a formatted PDF ready for print. Focus on content, not formatting.","title":"About"},{"location":"contact/","text":"Contact Typ is still in an early stage of development. For the latest news, follow Typ on Twitter @typ_set . You can email the developer of Typ at typ.hello@gmail.com . For bug reports, or feature requests, or questions, feel free to open an issue on the GitHub page for this site .","title":"Contact"},{"location":"contact/#contact","text":"Typ is still in an early stage of development. For the latest news, follow Typ on Twitter @typ_set . You can email the developer of Typ at typ.hello@gmail.com . For bug reports, or feature requests, or questions, feel free to open an issue on the GitHub page for this site .","title":"Contact"},{"location":"getting-started/","text":"Getting started Typ turns plain Markdown into a formatted PDF, ready for print. It is accessed through a command line interface. Your first document First install Typ. See Installation . Open a command line terminal. If Typ is not on your PATH , navigate to the installation folder from the terminal. Create a file called text.md . Open text.md and write something in Markdown. If you need inspiration, copy this: # Types, variables, and values C# is a strongly-typed language. Every variable and constant has a type, as does every expression that evaluates to a value. Every method signature specifies a type for each input parameter and for the return value. Here's an example of some C# code: ```c# int a = 5; int b = a + 2; //OK bool test = true; // Error. Operator '+' cannot be applied to operands of type 'int' and 'bool'. int c = a + test; ``` Try and run it in your favorite IDE. Run typ typeset --inputFilepaths text.md . Using text.md , Typ will then create a formatted PDF called output.pdf . Changing the output file You can use the --outputFilepath argument to change the output file name and location. Run typ typeset --inputFilepaths text.md --outputFilepath myDoc.pdf Typ will now produce a file called myDoc.pdf instead of output.pdf . Aliases All command line arguments have short-hand aliases. --inputFilepaths is aliased by -i . --outputFilepath is aliased by -o . Run typ typeset -i text.md -o myDoc.pdf to see the aliases in action. Multiple files Typ can use multiple Markdown files to create a PDF. Files are combined in the order specified by the --inputFilepaths ( -i ) command line argument. Create a new file, post-script.md and add the contents: # Post script Thanks for reading! Run typ typeset -i text.md post-script.md -o myDoc.pdf . myDoc.pdf should contain content from text.md and post-script.md . Configure the formatting Typ gives you control over how your PDF is created through a configuration file. Create a new file called config.yaml and paste in the following: title: C# docs fontFamily: Arial pageSize: A5 pageMargin: 70pt 60pt 70pt textLineHeight: 150% fontSize: 14pt generateTableOfContents: false printPageNumbers: false printTitleMarginals: false Run typ typeset -i text.md post-script.md -o myDoc.pdf You should see the difference by the way myDoc.pdf looks. Projects For a work that consists of multiple files (front cover, multiple chapter files, preamble, etc), these should be stored in a single folder, termed a Project. A Project is just a normal folder on your file system that contains files that Typ can work with. By following this guide, you have created a Project already. Run typ typeset . Note the absence of command line arguments. Typ will create a PDF, output.pdf , with the combined contents of text.md and post-script.md . Notice the contents of post-script.md now appears before text.md . In this context, typ typeset will look for all the Markdown files in the working directory. The files are sorted in alphabetical order using the file name, and then combined. The combined text is then used to produce a formatted PDF. You'll have to use a naming convention to ensure the files appear in the correct order. For instance, rename text.md to 001-text.md , and post-script.md to 002.post-script.md . Run typ typeset again, and the text will be in the correct order. Do more with Typ Typ has other features, such as: Front and back cover images Syntax highlighting for code blocks Advanced formatting configuration Read these pages to find out more: Writing Markdown Command Line Projects Configuration Contact Typ is still in an early stage of development. For the latest news, follow Typ on Twitter @typ_set . You can view the entire source code for this site on it's GitHub page . If you have a bug report, feature request, or question, feel free to open a GitHub issue. Pull Requests are also welcome if you'd like to contribute your own changes.","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"Typ turns plain Markdown into a formatted PDF, ready for print. It is accessed through a command line interface.","title":"Getting started"},{"location":"getting-started/#your-first-document","text":"First install Typ. See Installation . Open a command line terminal. If Typ is not on your PATH , navigate to the installation folder from the terminal. Create a file called text.md . Open text.md and write something in Markdown. If you need inspiration, copy this: # Types, variables, and values C# is a strongly-typed language. Every variable and constant has a type, as does every expression that evaluates to a value. Every method signature specifies a type for each input parameter and for the return value. Here's an example of some C# code: ```c# int a = 5; int b = a + 2; //OK bool test = true; // Error. Operator '+' cannot be applied to operands of type 'int' and 'bool'. int c = a + test; ``` Try and run it in your favorite IDE. Run typ typeset --inputFilepaths text.md . Using text.md , Typ will then create a formatted PDF called output.pdf .","title":"Your first document"},{"location":"getting-started/#changing-the-output-file","text":"You can use the --outputFilepath argument to change the output file name and location. Run typ typeset --inputFilepaths text.md --outputFilepath myDoc.pdf Typ will now produce a file called myDoc.pdf instead of output.pdf .","title":"Changing the output file"},{"location":"getting-started/#aliases","text":"All command line arguments have short-hand aliases. --inputFilepaths is aliased by -i . --outputFilepath is aliased by -o . Run typ typeset -i text.md -o myDoc.pdf to see the aliases in action.","title":"Aliases"},{"location":"getting-started/#multiple-files","text":"Typ can use multiple Markdown files to create a PDF. Files are combined in the order specified by the --inputFilepaths ( -i ) command line argument. Create a new file, post-script.md and add the contents: # Post script Thanks for reading! Run typ typeset -i text.md post-script.md -o myDoc.pdf . myDoc.pdf should contain content from text.md and post-script.md .","title":"Multiple files"},{"location":"getting-started/#configure-the-formatting","text":"Typ gives you control over how your PDF is created through a configuration file. Create a new file called config.yaml and paste in the following: title: C# docs fontFamily: Arial pageSize: A5 pageMargin: 70pt 60pt 70pt textLineHeight: 150% fontSize: 14pt generateTableOfContents: false printPageNumbers: false printTitleMarginals: false Run typ typeset -i text.md post-script.md -o myDoc.pdf You should see the difference by the way myDoc.pdf looks.","title":"Configure the formatting"},{"location":"getting-started/#projects","text":"For a work that consists of multiple files (front cover, multiple chapter files, preamble, etc), these should be stored in a single folder, termed a Project. A Project is just a normal folder on your file system that contains files that Typ can work with. By following this guide, you have created a Project already. Run typ typeset . Note the absence of command line arguments. Typ will create a PDF, output.pdf , with the combined contents of text.md and post-script.md . Notice the contents of post-script.md now appears before text.md . In this context, typ typeset will look for all the Markdown files in the working directory. The files are sorted in alphabetical order using the file name, and then combined. The combined text is then used to produce a formatted PDF. You'll have to use a naming convention to ensure the files appear in the correct order. For instance, rename text.md to 001-text.md , and post-script.md to 002.post-script.md . Run typ typeset again, and the text will be in the correct order.","title":"Projects"},{"location":"getting-started/#do-more-with-typ","text":"Typ has other features, such as: Front and back cover images Syntax highlighting for code blocks Advanced formatting configuration Read these pages to find out more: Writing Markdown Command Line Projects Configuration","title":"Do more with Typ"},{"location":"getting-started/#contact","text":"Typ is still in an early stage of development. For the latest news, follow Typ on Twitter @typ_set . You can view the entire source code for this site on it's GitHub page . If you have a bug report, feature request, or question, feel free to open a GitHub issue. Pull Requests are also welcome if you'd like to contribute your own changes.","title":"Contact"},{"location":"releases/","text":"Current release: 0.0.4 Download the current release here: Download Typ Typ is currently only available for machines running 64 bit Windows. Other platforms are coming soon. 0.0.4 (18/11/2019) Download Syntax highlighting for code blocks Add new configuration options printPageNumbers and printTitleMarginals Add command line arguments --inputFilepaths and --outputFilepath Create a PDF from multiple Markdown files Set the output file name Configuration file is now optional Only require PDFTk Server for features that need it Breaking changes Use YAML instead of JSON for configuration 0.0.3 (10/11/2019) Download Word wrap code blocks 0.0.2 (01/11/2019) Download Fix bug in Markdown parsing 0.0.1 (27/10/2019) Download Initial release","title":"Releases"},{"location":"releases/#current-release-004","text":"Download the current release here: Download Typ Typ is currently only available for machines running 64 bit Windows. Other platforms are coming soon.","title":"Current release: 0.0.4"},{"location":"releases/#004-18112019","text":"Download Syntax highlighting for code blocks Add new configuration options printPageNumbers and printTitleMarginals Add command line arguments --inputFilepaths and --outputFilepath Create a PDF from multiple Markdown files Set the output file name Configuration file is now optional Only require PDFTk Server for features that need it","title":"0.0.4 (18/11/2019)"},{"location":"releases/#breaking-changes","text":"Use YAML instead of JSON for configuration","title":"Breaking changes"},{"location":"releases/#003-10112019","text":"Download Word wrap code blocks","title":"0.0.3 (10/11/2019)"},{"location":"releases/#002-01112019","text":"Download Fix bug in Markdown parsing","title":"0.0.2 (01/11/2019)"},{"location":"releases/#001-27102019","text":"Download Initial release","title":"0.0.1 (27/10/2019)"},{"location":"usage/command-line/","text":"Command line Typ is accessed via a command line interface. You can use it with the Windows Command Prompt, PowerShell, bash, and so on. General usage is typ [command] [arguments] . There is currently only one command, typeset Command line arguments reference Argument Alias Effect --inputFilepaths -i List of Markdown files to use to create a formatted PDF. --outputFilepaths -o Output file path. Note that if --inputFilepaths is not specified, typeset will look for files in the working directory. This behavior is explained in more detail in Projects . Example usage typ typeset -i text.md post-script.md -o myDoc.pdf","title":"Command Line"},{"location":"usage/command-line/#command-line","text":"Typ is accessed via a command line interface. You can use it with the Windows Command Prompt, PowerShell, bash, and so on. General usage is typ [command] [arguments] . There is currently only one command, typeset","title":"Command line"},{"location":"usage/command-line/#command-line-arguments-reference","text":"Argument Alias Effect --inputFilepaths -i List of Markdown files to use to create a formatted PDF. --outputFilepaths -o Output file path. Note that if --inputFilepaths is not specified, typeset will look for files in the working directory. This behavior is explained in more detail in Projects .","title":"Command line arguments reference"},{"location":"usage/command-line/#example-usage","text":"typ typeset -i text.md post-script.md -o myDoc.pdf","title":"Example usage"},{"location":"usage/configuration/","text":"Configuration Typ is configured through a single YAML file, config.yaml . The configuration file must be present in a Typ project. See Projects for more information about Project files. Configuration reference General options Option name Description Example title The title of the document Alice in Wonderland generateTableOfContents Whether to generate a table of contents based on headings true or false printPageNumbers Whether to print page numbers true or false printTitleMarginals Whether to print the chapter title in a top corner, and the document title in the bottom corner true or false pdfTkPath (optional) Path to the PDFtk Server executable. See Installation . C:\\Programs\\bin\\pdftk.exe Formatting options These options control what the formatting of the document looks like. These options generally have an equivalent CSS property. For instance, textLineHeight maps to line-height , so could be set to normal , 2.5 , 3em , and so on. The links under the 'CSS' heading for each option have more information about valid values. Option name Description CSS Example textLineHeight Sets the distance between lines of text line-height 2.5 pageMargin The margin between the edge of the page and the content margin 10px pageSize The size of the page size A5 , 4in 6in fontFamily Font for all text content. Currently supported fonts: georgia , times new roman , arial & verdana font-family verdana Example config.yaml title: My document fontFamily: Arial pageSize: A5 pageMargin: 70pt 60pt 70pt textLineHeight: 200% fontSize: 12pt generateTableOfContents: false printPageNumbers: false printTitleMarginals: false pdfTkPath: C:\\Programs\\bin\\pdftk.exe","title":"Configuration"},{"location":"usage/configuration/#configuration","text":"Typ is configured through a single YAML file, config.yaml . The configuration file must be present in a Typ project. See Projects for more information about Project files.","title":"Configuration"},{"location":"usage/configuration/#configuration-reference","text":"","title":"Configuration reference"},{"location":"usage/configuration/#general-options","text":"Option name Description Example title The title of the document Alice in Wonderland generateTableOfContents Whether to generate a table of contents based on headings true or false printPageNumbers Whether to print page numbers true or false printTitleMarginals Whether to print the chapter title in a top corner, and the document title in the bottom corner true or false pdfTkPath (optional) Path to the PDFtk Server executable. See Installation . C:\\Programs\\bin\\pdftk.exe","title":"General options"},{"location":"usage/configuration/#formatting-options","text":"These options control what the formatting of the document looks like. These options generally have an equivalent CSS property. For instance, textLineHeight maps to line-height , so could be set to normal , 2.5 , 3em , and so on. The links under the 'CSS' heading for each option have more information about valid values. Option name Description CSS Example textLineHeight Sets the distance between lines of text line-height 2.5 pageMargin The margin between the edge of the page and the content margin 10px pageSize The size of the page size A5 , 4in 6in fontFamily Font for all text content. Currently supported fonts: georgia , times new roman , arial & verdana font-family verdana","title":"Formatting options"},{"location":"usage/configuration/#example-configyaml","text":"title: My document fontFamily: Arial pageSize: A5 pageMargin: 70pt 60pt 70pt textLineHeight: 200% fontSize: 12pt generateTableOfContents: false printPageNumbers: false printTitleMarginals: false pdfTkPath: C:\\Programs\\bin\\pdftk.exe","title":"Example config.yaml"},{"location":"usage/installation/","text":"Installation Typ is currently only available for machines running 64 bit Windows. Other platforms are coming soon. Follow these steps to download and install Typ. Install Typ Click this button to download Typ: Download Typ Unzip the folder and place it somewhere accessible on your machine (e.g C:\\Programs\\Typ ) Navigate to the installation folder from a command line terminal Run typ to check it works To run Typ from anywhere on your machine, you must add it to your PATH environment variable. Amend your PATH environment variable to point to the directory containing typ.exe For instance, if typ.exe lives in C:\\Programs\\Typ\\typ.exe , add C:\\Programs\\Typ to PATH Run typ from a command line terminal to check it works Install PDFtk Server (Optional) Some features of Typ depend on a command line application called PDFtk Server . Only follow this step if you know you want to use a feature that depends on PDFtk Server. Instructions Download and install PDFtk Server following the instructions on their website. Ensure it's available on your PATH , which can be tested after installation by running pdftk from the command line. If you don't want to add PDFtk Server to your PATH , you can use the pdfTkPath Configuration option . Think this is annoying? PDFtk Server requires a paid license for redistribution. If you'd like to help improve Typ by sponsoring the redistribution license see Contact .","title":"Installation"},{"location":"usage/installation/#installation","text":"Typ is currently only available for machines running 64 bit Windows. Other platforms are coming soon. Follow these steps to download and install Typ.","title":"Installation"},{"location":"usage/installation/#install-typ","text":"Click this button to download Typ: Download Typ Unzip the folder and place it somewhere accessible on your machine (e.g C:\\Programs\\Typ ) Navigate to the installation folder from a command line terminal Run typ to check it works To run Typ from anywhere on your machine, you must add it to your PATH environment variable. Amend your PATH environment variable to point to the directory containing typ.exe For instance, if typ.exe lives in C:\\Programs\\Typ\\typ.exe , add C:\\Programs\\Typ to PATH Run typ from a command line terminal to check it works","title":"Install Typ"},{"location":"usage/installation/#install-pdftk-server-optional","text":"Some features of Typ depend on a command line application called PDFtk Server . Only follow this step if you know you want to use a feature that depends on PDFtk Server.","title":"Install PDFtk Server (Optional)"},{"location":"usage/installation/#instructions","text":"Download and install PDFtk Server following the instructions on their website. Ensure it's available on your PATH , which can be tested after installation by running pdftk from the command line. If you don't want to add PDFtk Server to your PATH , you can use the pdfTkPath Configuration option . Think this is annoying? PDFtk Server requires a paid license for redistribution. If you'd like to help improve Typ by sponsoring the redistribution license see Contact .","title":"Instructions"},{"location":"usage/projects/","text":"Projects For a work that consists of multiple files (front cover, multiple chapter files, preamble, etc), these should be stored in a single folder, termed a Project. A Project is just a normal folder on your file system that contains files that Typ can work with. Typ will consider the working directory to be a Project folder. Therefore, it's best to use a single folder for the exclusive use of Typ if you plan to use multiple files. Creating a Project Create a new folder somewhere on the file system. This will be the Project folder. Add Markdown files for the content of your document. Ensure each file has a .md file extension. Reserved file names There are certain file names that have special meanings in Typ. If present in your Project, Typ will automatically pick them up and use them. For instance, to add a cover image to your document, just add a file called front-cover.png to your Project. See the Project file reference at the end of this page for details. Projects and the command line When you run typ typset in a Project, Typ will do the following: Find all the files that end in the .md extension Combine the files in alphabetical order Pick up any files with reserved file names Create the PDF Reserved Project file name reference This table explains the purpose of each Project file. File Description optional *.md The content of the document false config.yaml Configuration for how the document should be produced. See Configuration for details about each configuration option. true preamble.md The first content page. Could contain copyright details, author information, etc. true front-cover.png The front cover image of your document true back-cover.png The back cover image of your document true","title":"Projects"},{"location":"usage/projects/#projects","text":"For a work that consists of multiple files (front cover, multiple chapter files, preamble, etc), these should be stored in a single folder, termed a Project. A Project is just a normal folder on your file system that contains files that Typ can work with. Typ will consider the working directory to be a Project folder. Therefore, it's best to use a single folder for the exclusive use of Typ if you plan to use multiple files.","title":"Projects"},{"location":"usage/projects/#creating-a-project","text":"Create a new folder somewhere on the file system. This will be the Project folder. Add Markdown files for the content of your document. Ensure each file has a .md file extension.","title":"Creating a Project"},{"location":"usage/projects/#reserved-file-names","text":"There are certain file names that have special meanings in Typ. If present in your Project, Typ will automatically pick them up and use them. For instance, to add a cover image to your document, just add a file called front-cover.png to your Project. See the Project file reference at the end of this page for details.","title":"Reserved file names"},{"location":"usage/projects/#projects-and-the-command-line","text":"When you run typ typset in a Project, Typ will do the following: Find all the files that end in the .md extension Combine the files in alphabetical order Pick up any files with reserved file names Create the PDF","title":"Projects and the command line"},{"location":"usage/projects/#reserved-project-file-name-reference","text":"This table explains the purpose of each Project file. File Description optional *.md The content of the document false config.yaml Configuration for how the document should be produced. See Configuration for details about each configuration option. true preamble.md The first content page. Could contain copyright details, author information, etc. true front-cover.png The front cover image of your document true back-cover.png The back cover image of your document true","title":"Reserved Project file name reference"},{"location":"usage/writing-markdown/","text":"Writing Markdown When writing a document you want to spend most of your time on content, not formatting. Typ allows you to write your document's content in a simple, lightweight text format called Markdown. With Typ, you can specify the important parts of your document's appearance, like font style and page size. Typ will combine your configuration with it's own sensible formatting style to produce a PDF. You can learn more about how to write Markdown on Markdown Guide . Syntax highlighting Typ supports syntax highlighting for Markdown code blocks. In order to turn on syntax highlighting for a code block, you need to supply a language code. For instance, for a C# code block: ```c# int x = 0; x++; Console.WriteLine(x); ``` Syntax highlighting Markdown code reference A table of supported languages and their codes is listed here. Language Markdown code ASPX aspx C c C++ c++ C# c# COBOL cobol Eiffel eiffel FORTRAN fortran Haskell haskell HTML html Java java JavaScript javascript Mercury mercury Pascal pascal Perl perl PHP php Python python Ruby ruby SQL sql Visual Basic visual basic VB Script vbscript VB.NET vb.net XML xml","title":"Writing Markdown"},{"location":"usage/writing-markdown/#writing-markdown","text":"When writing a document you want to spend most of your time on content, not formatting. Typ allows you to write your document's content in a simple, lightweight text format called Markdown. With Typ, you can specify the important parts of your document's appearance, like font style and page size. Typ will combine your configuration with it's own sensible formatting style to produce a PDF. You can learn more about how to write Markdown on Markdown Guide .","title":"Writing Markdown"},{"location":"usage/writing-markdown/#syntax-highlighting","text":"Typ supports syntax highlighting for Markdown code blocks. In order to turn on syntax highlighting for a code block, you need to supply a language code. For instance, for a C# code block: ```c# int x = 0; x++; Console.WriteLine(x); ```","title":"Syntax highlighting"},{"location":"usage/writing-markdown/#syntax-highlighting-markdown-code-reference","text":"A table of supported languages and their codes is listed here. Language Markdown code ASPX aspx C c C++ c++ C# c# COBOL cobol Eiffel eiffel FORTRAN fortran Haskell haskell HTML html Java java JavaScript javascript Mercury mercury Pascal pascal Perl perl PHP php Python python Ruby ruby SQL sql Visual Basic visual basic VB Script vbscript VB.NET vb.net XML xml","title":"Syntax highlighting Markdown code reference"}]}